syntax = "proto3";

option csharp_namespace = "LGDXRobotCloud.Protos";

service RobotClientsService {
  rpc Greet (RobotClientsGreet) returns (RobotClientsGreetResponse);
  rpc Exchange (stream RobotClientsExchange) returns (stream RobotClientsResponse);
  rpc SlamExchange (stream RobotClientsSlamExchange) returns (stream RobotClientsSlamCommands);
}

/*
** Common
*/

message RobotClients2Dof {
  double X = 1;
  double Y = 2;
}

message RobotClientsDof {
  double X = 1;
  double Y = 2;
  double Rotation = 3;
}

enum RobotClientsRobotStatus {
  Idle = 0;
  Running = 1;
  Stuck = 2;
  Aborting = 3;
  Paused = 4;
  Critical = 5;
  Charging = 6;
  Offline = 7;
}

message RobotClientsRobotCriticalStatus {
  bool HardwareEmergencyStop = 1;
  bool SoftwareEmergencyStop = 2;
  repeated int32 BatteryLow = 3;
  repeated int32 MotorDamaged = 4;
}

message RobotClientsAutoTaskNavProgress {
  double Eta = 1;
  int32 Recoveries = 2;
  double DistanceRemaining = 3;
  int32 WaypointsRemaining = 4;
  repeated RobotClients2Dof Plan = 5;
}

// Final Data
message RobotClientsData {
  RobotClientsRobotStatus RobotStatus = 1;
  RobotClientsRobotCriticalStatus CriticalStatus = 2;
  repeated double Batteries = 3;
  RobotClientsDof Position = 4;
  RobotClientsAutoTaskNavProgress NavProgress = 5;
}

/*
** Greet
*/
enum RobotClientsResultStatus {
  Success = 0;
  Failed = 1;
}

message RobotClientsSystemInfo {
  string Cpu = 1;
  string Motherboard = 2;
  string MotherboardSerialNumber = 3;
  bool IsLittleEndian = 4;
  int32 RamMiB = 5;
  string Gpu = 6;
  string Os = 7;
  bool Is32Bit = 8;
  string McuSerialNumber = 9;
}

message RobotClientsChassisInfo {
  int32 RobotTypeId = 1;
  double ChassisLX = 2;
  double ChassisLY = 3;
  int32 ChassisWheelCount = 4;
  double ChassisWheelRadius = 5;
  int32 BatteryCount = 6;
  double BatteryMaxVoltage = 7;
  double BatteryMinVoltage = 8;
}

message RobotClientsGreet {
  RobotClientsSystemInfo SystemInfo = 1;
}

message RobotClientsGreetResponse {
  RobotClientsResultStatus Status = 1;
  string AccessToken = 2;
  RobotClientsChassisInfo ChassisInfo = 3;
}

/*
** Exchange
*/
message RobotClientsNextToken {
  int32 TaskId = 1;
  string NextToken = 2;
}

enum RobotClientsAbortReason {
  Reserved = 0;
  UserApi = 1;
  Robot = 2;
  NavStack = 3;
}

message RobotClientsAbortToken {
  int32 TaskId = 1;
  string NextToken = 2;
  RobotClientsAbortReason AbortReason = 3;
}

// Clients to Server
message RobotClientsExchange {
  RobotClientsData RobotData = 1;
  optional RobotClientsNextToken NextToken = 2;
  optional RobotClientsAbortToken AbortToken = 3;
}

message RobotClientsRobotCommands {
  optional bool AbortTask = 1;
  optional bool RenewCertificate = 2;
  optional bool SoftwareEmergencyStopEnable = 3;
  optional bool SoftwareEmergencyStopDisable = 4;
  optional bool PauseTaskAssigementEnable = 5;
  optional bool PauseTaskAssigementDisable = 6;
}

message RobotClientsPath {
  repeated RobotClientsDof Waypoints = 1;
}

message RobotClientsAutoTask {
  int32 TaskId = 1;
  string TaskName = 2;
  int32 TaskProgressId = 3;
  string TaskProgressName = 4;
  repeated RobotClientsPath Paths = 5;
  string NextToken = 6;
}

// Server to Clients
message RobotClientsResponse {
  optional RobotClientsRobotCommands Commands = 1;
  optional RobotClientsAutoTask Task = 2;
}

/*
** SLAM
*/

enum RobotClientsSlamStatus {
  SlamIdle = 0;
  SlamRunning = 1;
  SlamSuccess = 2;
  SlamAborted = 3;
}

message RobotClientsMapData {
  float Resolution = 1;
  uint32 Width = 2;
  uint32 Height = 3;
  RobotClientsDof Origin = 4;
  repeated int32 Data = 5;
}

// Clients to Server
message RobotClientsSlamExchange {
  RobotClientsSlamStatus Status = 1;
  RobotClientsData RobotData = 2;
  optional RobotClientsMapData MapData = 3;
}

// Server to Clients
message RobotClientsSlamCommands {
  optional RobotClientsDof SetGoal = 1;
  optional bool AbortGoal = 2;
  optional bool SoftwareEmergencyStopEnable = 3;
  optional bool SoftwareEmergencyStopDisable = 4;
  optional bool SaveMap = 5;
  optional bool RefreshMap = 6;
  optional bool CompleteSlam = 7;
  optional bool AbortSlam = 8;
}